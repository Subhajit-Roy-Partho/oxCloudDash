
"use client";

import React, { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { api } from '@/lib/api';
import { useToast } from '@/hooks/use-toast';
import { saveAs } from 'file-saver';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Skeleton } from '@/components/ui/skeleton';
import { Download, Eye, File as FileIcon, ArrowLeft, RefreshCw } from 'lucide-react';
import Link from 'next/link';
import { ScrollArea } from '@/components/ui/scroll-area';

const VIEWABLE_EXTENSIONS = ['.txt', '.top', '.dat', '.json', '.log', '.sh'];

export default function JobFilesPage() {
  const searchParams = useSearchParams();
  const jobId = searchParams.get('jobId');
  const { toast } = useToast();
  
  const [files, setFiles] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [viewingFile, setViewingFile] = useState<{ name: string; content: string } | null>(null);
  const [isViewLoading, setIsViewLoading] = useState(false);

  const fetchFiles = async () => {
    if (!jobId) return;
    setLoading(true);
    try {
      const fileList = await api.listJobFiles(jobId);
      setFiles(fileList);
    } catch (error) {
      toast({
        title: "Error fetching files",
        description: (error as Error).message || "Could not retrieve the file list for this job.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchFiles();
  }, [jobId]);

  const handleDownload = async (filename: string) => {
    if (!jobId) return;
    toast({ title: "Download Started", description: `Preparing to download ${filename}...` });
    try {
      const blob = await api.downloadFile(jobId, filename);
      saveAs(blob, filename);
    } catch (error) {
      toast({
        title: "Download Failed",
        description: (error as Error).message || `Could not download ${filename}.`,
        variant: "destructive",
      });
    }
  };

  const handleView = async (filename: string) => {
    if (!jobId) return;
    setIsViewLoading(true);
    setViewingFile({ name: filename, content: "Loading content..." });
    try {
      const content = await api.getJobFileContent(jobId, filename);
      setViewingFile({ name: filename, content });
    } catch (error) {
      setViewingFile({ name: filename, content: `Error loading file: ${(error as Error).message}` });
    } finally {
      setIsViewLoading(false);
    }
  };

  if (!jobId) {
     return (
        <div className="space-y-6 text-center">
            <h1 className="text-2xl font-bold tracking-tight font-headline mt-8">Job Not Specified</h1>
            <p className="text-muted-foreground">Please return to the Job Status page and select a job to view its files.</p>
             <Button variant="outline" asChild>
                <Link href="/job-status">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back to Job Status
                </Link>
            </Button>
        </div>
    );
  }

  return (
    <div className="space-y-6">
       <Dialog open={!!viewingFile} onOpenChange={(isOpen) => !isOpen && setViewingFile(null)}>
        <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
          <DialogHeader>
            <DialogTitle>Viewing: {viewingFile?.name}</DialogTitle>
          </DialogHeader>
          <ScrollArea className="flex-grow h-full border rounded-md bg-muted/20">
            <pre className="p-4 text-xs">
              <code>
                {viewingFile?.content}
              </code>
            </pre>
          </ScrollArea>
        </DialogContent>
      </Dialog>
      
      <div>
        <Button variant="outline" size="sm" asChild className="mb-2">
          <Link href="/job-status">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Job Status
          </Link>
        </Button>
        <h1 className="text-3xl font-bold tracking-tight font-headline">Job Files</h1>
        <p className="text-muted-foreground font-code text-sm">Job ID: {jobId}</p>
      </div>

      <Card>
        <CardHeader>
            <div className="flex justify-between items-center">
                <div>
                    <CardTitle>File Browser</CardTitle>
                    <CardDescription>Browse, download, or view the files generated by your simulation.</CardDescription>
                </div>
                <Button variant="outline" size="icon" onClick={fetchFiles} disabled={loading}>
                    <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
                </Button>
            </div>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Filename</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {loading ? (
                  [...Array(5)].map((_, i) => (
                    <TableRow key={i}>
                      <TableCell><Skeleton className="h-5 w-48" /></TableCell>
                      <TableCell className="text-right"><Skeleton className="h-8 w-24 inline-block" /></TableCell>
                    </TableRow>
                  ))
                ) : files.length > 0 ? (
                  files.map((file) => {
                    const isViewable = VIEWABLE_EXTENSIONS.some(ext => file.endsWith(ext));
                    return (
                      <TableRow key={file}>
                        <TableCell className="font-medium flex items-center gap-2">
                          <FileIcon className="h-4 w-4 text-muted-foreground" />
                          {file}
                        </TableCell>
                        <TableCell className="text-right space-x-2">
                          {isViewable && (
                            <Button variant="outline" size="sm" onClick={() => handleView(file)} disabled={isViewLoading}>
                              <Eye className="mr-2 h-4 w-4" />
                              View
                            </Button>
                          )}
                          <Button variant="default" size="sm" onClick={() => handleDownload(file)}>
                            <Download className="mr-2 h-4 w-4" />
                            Download
                          </Button>
                        </TableCell>
                      </TableRow>
                    );
                  })
                ) : (
                  <TableRow>
                    <TableCell colSpan={2} className="h-24 text-center">
                      No files found for this job.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
